data(USArrests)
head(USArrests)
dim(USArrests)
library(sp)
library(gstat)
install.packages("gstat")
library(gstat)
library(ggplot2)
library(geoR)
data(elevation)
elevation
length(elevation)
length(elevation$data)
plot(elevation$coords)
library(scatterplot3d)
scatterplot3d(elevation$coords[,1],elevation$coords[,2],elevation$data)
scatterplot3d(elevation$coords[,1],elevation$coords[,2],elevation$data,type = "h")
str(elevation)
elev = as.data.frame(elevation)
class(elev)
elev
ggplot(aes(x,y)) + geom_point(aes(size=data), color="blue",alpha=3/4)+ theme_bw()
ggplot(aes(x,y)) + geom_point(aes(size=data), color="blue",alpha=3/4)+ coord_equal() + theme_bw()
data("meuse")
head(meuse)
class(meuse)
ggplot(aes(elev$x,elev$y)) + geom_point(aes(size=elev$data), color="blue",alpha=3/4)+ coord_equal() + theme_bw()
ggplot(aes(x, y)) + geom_point(aes(size=zinc), color="blue", alpha=3/4)
meuse %>% as.data.frame %>%
ggplot(aes(x, y)) + geom_point(aes(size=zinc), color="blue", alpha=3/4)
ggplot(aes(x, y)) + geom_point(aes(size=zinc), color="blue", alpha=3/4) +
ggtitle("Zinc Concentration (ppm)") + coord_equal() + theme_bw()
vv = variog(elevation,option="bin")
str(vv)
variog
vv = variog(elevation,option="cloud")
str(vv)
vv = variog(elevation,option="bin")
str(vv)
vv$bins.lim
vv = variog(elevation,option="cloud")
vv1 = variog(elevation,option = "bin")
str(vv)
plot(vv$bins.lim)
plot(vv1$bins.lim)
plot(vv1$uvec)
(vv1$uvec)
(vv1$u)
vv2 = variogram(meuse)
vv2 = variogram(log(zinc)~1,meuse)
coordinates(meuse) = ~x+y
vv2 = variogram(log(zinc)~1,meuse)
str(vv2)
plot(vv2)
vv2 = variogram(log(zinc)~x+y,meuse)
plot(vv2)
vv2 = variogram(elevation~x+y,elevation)
coordinates(elevation) = ~elevation$coords[,1] + elevation$coords[,2]
coordinates(elevation) = ~elev$x + elev$y
coordinates(elev) = ~elev$x + elev$y
head(elev)
class(meuse)
coordinates(elev) = ~x + y
vv1$v
plot(vv$u,vv$v,pch=16)
dis(elev[1,],elev[2,])
dist(elev[1,],elev[2,])
dist(elev[1,1:2],elev[2,1:2])
?dist
dist(elev[1:2,1:2])
vv$u
vv$u[1]
dist(elev[c(1,3),1:2])
vv$u[2]
dist(elev[c(1,5),1:2])
vv$u[4]
dist(elev[c(1,52),1:2])
vv$u[51]
dist(elev[c(2,3),1:2])
vv$u[52]
52*51/2
vv$uvec = seq(0, vv$max.dist,13)
vv1$u
vv$uvec
vv$uvec = seq(0, vv$max.dist,length.out=13)
vv$uvec
vv$uvec = seq(0, vv$max.dist,length.out=14)
vv$uvec
(vv$uvec[2]-vv$uvec[1])/2
vvbin = list()
for(i in 1:13)
{
vvbin[[i]]$v = vv$v[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i+1])]
vvbin[[i]]$u = vv$u[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i+1])]
}
vvbin = list()
for(i in 1:13)
{
vvbin[[i]]$v = vv$v[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i])]
vvbin[[i]]$u = vv$u[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i])]
}
i
vv$v[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i])]
vv$u[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i])]
vv1$n
vvbin = list()
for(i in 1:13)
{
vvbin[[i]] =data.frame(vv$v[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i])],
vv$u[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i])])
}
vvbin[[1]]
for(i in 1:13)
{
vvbin[[i]] =data.frame(v = vv$v[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i])],
u=vv$u[which(vv$u<=vv$uvec[i+1] & vv$u >= vv$uvec[i])])
}
vvbin[[1]]
vvbin[[2]]
par(mfrow=c(7,2))
vvbin[[1]]$u
}
# visuals
for (i in 1:13) {plot(vvbin[[i]]$u,vvbin[[i]]$v,pch=16)}
windows()
# visuals
par(mfrow=c(7,2))
for (i in 1:13) {plot(vvbin[[i]]$u,vvbin[[i]]$v,pch=16)}
for (i in 1:13) {plot(vvbin[[i]]$u,vvbin[[i]]$v,pch=16)}
# visuals
windows()
par(mfrow=c(5,3))
for (i in 1:13) {plot(vvbin[[i]]$u,vvbin[[i]]$v,pch=16)}
for (i in 1:13) {hist(vvbin[[i]]$v)}
for (i in 1:13) {hist(sqrt(vvbin[[i]]$v))}
# descriptives
descv = data.frame()
for (i in 1:13) {descv = rbind(descv,data.frame(sd(sqrt(vvbin[[i]]$v)),
mean(vvbin[[i]]$v),
mean(vvbin[[i]]$u)))}
descv
descv = data.frame()
for (i in 1:13) {descv = rbind(descv,data.frame(sdv = sd(sqrt(vvbin[[i]]$v)),
meanv = mean(sqrt(vvbin[[i]]$v)),
meanu = mean(vvbin[[i]]$u)))}
descv
plot(descv$meanu,descv$meanv,pch=16)
plot(vv1)
descv = data.frame()
for (i in 1:13) {descv = rbind(descv,data.frame(sdv = sd(sqrt(vvbin[[i]]$v)),
meanv = mean((vvbin[[i]]$v)),
meand = mean(sqrt(vvbin[[i]]$v)),
meanu = mean(vvbin[[i]]$u)))}
descv
plot(vvbin[[2]]$u, vvbin[[v]],pch=16)
plot(vvbin[[2]]$u, vvbin[[2]]$v,pch=16)
plot(vvbin[[2]]$u, vvbin[[2]]$v,pch=16)
windows()
plot(vvbin[[2]]$u, vvbin[[2]]$v,pch=16)
plot(vvbin[[3]]$u, vvbin[[3]]$v,pch=16)
windows()
plot(vvbin[[3]]$u, vvbin[[3]]$v,pch=16)
hist(vvbin[[3]]$v)
hist(sqrt(vvbin[[3]]$v))
vv = variog(log(elevation),option="cloud")
vv = variog(log(1+elevation),option="cloud")
head(elev)
ggplot(aes(elev$x,elev$y))
class(elev)
elev
elev = as.data.frame(elevation$coords,elevation$data)
class(elev)
ggplot(aes(elev$x,elev$y))
elev$x
ggplot(aes(elev$x,elev$y)) + geom_point(aes(size=elev$data))
head(elev)
elevation
elevation$x
elevation$'coords'
elev = data.frame(elevation$'coords',elevation$data)
ggplot(aes(elev$x,elev$y)) + geom_point(aes(size=elev$data))
calss(elev)
class(elev)
head(elev)
ggplot(aes(elev$x,elev$y)) + geom_point(aes(size=elev$elevation.data))
str(elev)
ggplot(aes(elev$x,elev$y)) + geom_point((size=elev$elevation.data))
?geom_point
p = ggplot(elev,aes(x,y))
p + geom_point(aes(size = elevation.data))
p + geom_point(aes(size = elevation.data),alpha=3/4) + theme_bw()
784+784
784*784
1568*16
1568*8
1568*8 +784
784*16
784*16 + 16*16 + 16*10 + 16 +16 +10
install.packages("tidyverse")
175+35+5
data(mpg)
MyGraph = ggplot(data = mpg)
library(ggplot2)
MyGraph = ggplot(data = mpg)
str(MyGraph)
str(MyGraph$data)
head(MyGraph$data)
??mpg
# Scatterplot engine displacement vs highway miles per gallon
MyGraph = MyGraph + geom_point(mapping = aes(x = displ, y = hwy))
MyGraph
data("cbPalette")
data(cbPalette)
??cbPalette
?cbPalette
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, colour = class), size = 4)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, colour = class), size = 6)
ggplot(data=mpg)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, colour = class), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, colour = shape), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = alpha), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = colour), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = class), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, colour = displ<5), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, colour = manufacturer), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = 0:14), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = seq(0,14,1)), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = 0:14), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class), size = 6)
# visualize with different colours for different car-class
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class), size = 3)
ggplot(data = mpg) + geom_smooth(mapping = aes(x=displ, y=hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y =hwy, size = 4, colour = class))+ geom_smooth(mapping = aes(x=displ, y=hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y =hwy, size = 4, colour = class))+ geom_smooth(mapping = aes(x=displ, y=hwy),method="lm")
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y =hwy, size = 4, colour = class))+ geom_smooth(mapping = aes(x=displ, y=hwy, group = displ< 5),method="lm")
?mpg
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y =hwy, size = 4, colour = drv))+ geom_smooth(mapping = aes(x=displ, y=hwy, group = drv),method="lm")
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y =hwy, size = 4, colour = drv))+ geom_smooth(mapping = aes(x=displ, y=hwy, group = drv, color =drv),method="lm")
# Facets
MyGraph = ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy), colour = "red", shape = 15,size=6)
MyGraph + facet_grid(class~drv)
MyGraph + facet_wrap(c("class","drv"),ncol=4)
MyGraph + facet_wrap(c("trans"), nrow = 1) # facet for one variable
MyGraph + facet_wrap(c("trans"), nrow = 5) # facet for one variable
MyGraph + facet_wrap(c("trans"), nrow = 2) # facet for one variable
table(mpg$trans)
sum(table(mpg$trans))
install.packages("mdsr")
library(msdr)
library(mdsr)
data(CIACountries)
rm(MyGraphs)
rm(MyGraph)
str(CIACountries)
# barplot
ggplot(data = CIACountries) + geom_bar(mapping = aes(x=net_users))
# subsample of coutries
CIACountries_sample = sample_n(CIACountries,size = 25) #random sample of 25 nations
# Arrange and depict the countries for their populations
ordered_countries = reorder(CIACountries_sample$country, CIACountries_sample$pop)
G = ggplot(data=CIACountries_sample)
+ geom_bar(mapping = aes(x=country, y =pop),stat = "identity") # switch from default stat = "count"
+ coord_flip() # flip to horizontal bars
G = ggplot(data=CIACountries_sample)
+ geom_bar(mapping = aes(x=country, y =pop),stat = "identity") # switch from default stat option
+ coord_flip() # flip to horizontal bars
G = ggplot(data=CIACountries_sample)
+ geom_bar(mapping = aes(x=country, y =pop),stat = "identity") + coord_flip() # flip to horizontal bars
# plot countries and population
G = ggplot(data=CIACountries_sample)+ geom_bar(mapping = aes(x=country, y =pop),stat = "identity") + coord_flip()
G = ggplot(data=CIACountries_sample)+
geom_bar(mapping = aes(x=country, y =pop),stat = "identity") + coord_flip()
G = ggplot(data=CIACountries_sample)+
geom_bar(mapping = aes(x=country, y =pop),stat = "identity") +
coord_flip()
G
G = ggplot(data=ordered_countries)+
geom_bar(mapping = aes(x=country, y =pop),stat = "identity") +
coord_flip()
# Arrange and depict the countries for their populations
ordered_countries = reorder(CIACountries_sample$country, CIACountries_sample$pop)
G = ggplot(data=ordered_countries)+
geom_bar(mapping = aes(x=country, y =pop),stat = "identity") +
coord_flip()
# barplot for studying relation between two variables
# one variable is categorical
# subsample of coutries
CIACountries_sample = sample_n(CIACountries,size = 25) #random sample of 25 nations
# plot countries and population
G = ggplot(data=ordered_countries)+ geom_bar(mapping = aes(x=country, y =pop),stat = "identity") +coord_flip()
head(ordered_countries)
# plot countries and population
G = ggplot(data=CIACountries_sample)+ geom_bar(mapping = aes(x=ordered_countries, y =pop),stat = "identity") + coord_flip()
G
# barplot for studying relation between two variables
# one variable is categorical
# subsample of coutries
CIACountries_sample = sample_n(CIACountries,size = 25) #random sample of 25 nations
# Arrange and depict the countries for their populations
ordered_countries = reorder(CIACountries_sample$country, CIACountries_sample$pop)
# plot countries and population
G = ggplot(data=CIACountries_sample)+ geom_bar(mapping = aes(x=ordered_countries, y =pop),stat = "identity") + coord_flip()
# plot countries and population
G = ggplot(data=CIACountries_sample)+ geom_bar(mapping = aes(x=ordered_countries, y =pop),stat = "identity") + coord_flip()
rm(G)
# plot countries and population
G = ggplot(data=CIACountries_sample)+ geom_bar(mapping = aes(x=ordered_countries, y =pop),stat = "identity") + coord_flip()
G
# barplot for studying relation between two variables
# one variable is categorical
# subsample of coutries
CIACountries_sample = sample_n(CIACountries,size = 25) #random sample of 25 nations
# Arrange and depict the countries for their populations
ordered_countries = reorder(CIACountries_sample$country, CIACountries_sample$pop)
# repeat the sampling but update with
G = G %+% CIACountries_sample
G
data(diamonds)
head(diamonds)
# barplot colours
ggplot(data = diamonds) + geom_bar(mapping = aes(x=color,fill = color))
# barplot colours
ggplot(data = diamonds) + geom_bar(mapping = aes(x=color,fill = cut))
ggplot(data = diamonds) + geom_bar(mapping = aes(x=color, fill = cut), position = "fill")
# different depiction as clusters of bar
ggplot(data = diamonds) + geom_bar(mapping = aes(x=color, fill = cut), position = "dodge")
# histograms - the variable of interest is continuous: ratio/interval scale
ggplot(data=diamonds, mapping = aes(price)) +geom_histogram(binwidth = 200, colour = "black", fill="white")
ggplot(data=CIACountries, mapping = aes(pop)) +geom_histogram(binwidth = 200, colour = "black", fill="steelblue")
ggplot(data=CIACountries, mapping = aes(pop)) +geom_histogram(binwidth = 50, colour = "black", fill="steelblue")
ggplot(date = CIACountries, mapping = aes(pop)) + geom_histogram(binwidth = 50, colour = "orange") + scale_x_log10()
Exact = function(m){c(fisher.test(m,alternative = "two.sided")$p.value,
fisher.test(m,alternative = "two.sided")$estimate,
fisher.test(m,alternative = "two.sided")$conf.int
)
}
mat24.1 = matrix(c(11, 3869-11,7, 771-7),2,2) # laparoscopy
Exact(mat24.1)
install.packages("orientlib")
library(orientlib)
rotdat = read.csv("slowtrans_work.csv",header = T)
setwd("C:/Users/jc649093/OneDrive - James Cook University/Research/Regression of Rotation_BronP")
rotdat = read.csv("slowtrans_work.csv",header = T)
head(rotdat)
dim(rotdat)
rotdat.1 = rotdata[>8305,]
rotdat.1 = rotdata[8305:nrow(rotdat),]
rotdat.1 = rotdat[8305:nrow(rotdat),]
library(orientlib)
x <- rotvector(c(0,1,0,-1,0,0,0,0,1))
x
x <- (matrix(c(1,0,0, 0,1,0, 0,0,1), 3, 3))
x.rot <- rotmatrix(x)
x
x.rot
rotvector()
rotvector
showMethods("rotve")
showMethods("rotvector")
plot.ts(rotdat.1[,5])
plot.ts(rotdat.1[,4])
plot.ts(rotdat.1[,6])
plot.ts(rotdat.1[,7])
plot.ts(rotdat.1[,8])
names(rotdat.1)[1:10]
names(rotdat.1)[1:20]
names(rotdat.1)[1:23]
spectrum(rotdat.1[,6])
spectrum(rotdat.1[,6][!is.na(rotdat.1[,6])])
# plot time series
par(mfrow = c(3,6))
for(i in 6:23){plot.ts(rotdat.1[,i][!is.na(rotdat.1[,i])],col=i)}
for(i in 6:23){plot.ts(rotdat.1[,i][!is.na(rotdat.1[,i])],col=i,ylab=names(rotdat.1[i]))}
# plot raw periodogram of time series
for(i in 6:23){spectrum(rotdat.1[,i][!is.na(rotdat.1[,i])])}
for(i in 6:23){plot.ts(rotdat.1[,i][!is.na(rotdat.1[,i])],col=i,ylab=names(rotdat.1[i]))}
# plot raw periodogram of time series
for(i in 6:23){spectrum(rotdat.1[,i][!is.na(rotdat.1[,i])],col=i,ylab=names(rotdat.1[i]))}
x <- rep(1:10,10)
y <- rep(1:10,each=10)
A1 <- skewvector(cbind(x/10,y/10,rep(0,100)))
A2 <- skewvector(c(1,1,1))
trueorientation <- skewvector(matrix(rnorm(300),100))
noise <- skewvector(matrix(rnorm(300)/10,100))
obs <- t(A1) %*% trueorientation %*% A2 %*% noise
x
y
A1
A2
head(rotdat.1[,1:16])
(rotdat.1[1,6:8]*t(rotdat.1[1,6:8]))
(rotdat.1[2,6:8]*t(rotdat.1[2,6:8]))
(t(rotdat.1[2,6:8])*rotdat.1[2,6:8])
(t(rotdat.1[2,6:8])%*%rotdat.1[2,6:8])
(rotdat.1[2,6:8]%*%t(rotdat.1[2,6:8]))
dim(rotdat.1[2,6:8])
dim(t(rotdat.1[2,6:8]))
class(rotdat.1[,6:8])
class(rotdat.1[,6])
rotdat.1[2,6:8]
class(rotdat.1[2,6:8])
sum((rotdat.1[2,6:8])^2)
sqrt(sum((rotdat.1[2,6:8])^2))
sqrt(sum((rotdat.1[2,5:8])^2))
rotation.angle(eulerzyx(1,0,0))
rotation.angle(eulerzyx(0,1,0))
skewvector(c(1,0,0))
quaternion(rotdat.1[2,9:11])
quaternion(rotdat.1[2,5:8])
quaternion(as.matrix(rotdat.1[2,5:8]))
# but all column names have the character "_quat_"
# employ dplyr() and select using contains() option
quater.allcam = select(rotdat.1,contains("_quat_"))
# but all column names have the character "_quat_"
# employ dplyr() and select using contains() option
library(dplyr)
quater.allcam = select(rotdat.1,contains("_quat_"))
dim(quater.allcam)
names(rotdat.1)
rotdat = read.csv("slowtrans_work.csv",header = T)
rotdat.1 = rotdat[8305:nrow(rotdat),] # removing time points before time '0'
quater.allcam = select(rotdat.1,contains("_quat_"))
dim(quater.allcam)
names(rotdat.1)
quater.allcam = select(rotdat.1,contains(c("_quat_","_quat")))
quater.allcam = select(rotdat.1,contains("_quat_"|"_quat"))
quater.allcam = select(rotdat.1,contains("quat"))
dim(quater.allcam)
setwd("C:/Users/jc649093/OneDrive - James Cook University/TeachingMaterials/Foundations of Data Science/Week 4b-assessments")
NIR = read.csv("NIRPred.csv",header = T,sep=",")
setwd("C:\Users\jc649093\OneDrive - James Cook University\TeachingMaterials\Foundations of Data Science\Week 4b-assessments\Sugar_Cane_NIRS\Sugar_Cane_Input_Files")
setwd("C:/Users/jc649093/OneDrive - James Cook University/TeachingMaterials/Foundations of Data Science/Week 4b-assessments/Sugar_Cane_NIRS/Sugar_Cane_Input_Files")
NIR = read.csv("NIRPred.csv",header = T,sep=",")
names(NIR)
summary(NIR$NH)
(24/34)*100
x <- rep(1:10,10)
y <- rep(1:10,each=10)
x
y
A1 <- skewvector(cbind(x/10,y/10,rep(0,100)))
dim(A1)
str(A1)
A1@x
trueorientation <- skewvector(matrix(rnorm(300),100))
trueorientation <- skewvector(matrix(rnorm(300),100))
noise <- skewvector(matrix(rnorm(300)/10,100))
obs <- t(A1) %*% trueorientation %*% A2 %*% noise
t(A1)
A2
8/12
965+391
(9.5/12)*100
(10.5/12)*100
0.9*(10/12)*100
7.5/12
9*6 + 25*2
